.program vga_visible
; VISIBLE AREA = 800
; FRONT_PORCH = 40
; SYNC_PULSE = 128
; BACK_PORCH = 88

.side_set 2    ; Horisontal + vertical sync pin

; Perform one scanline, outputting one pixel every other clock cycle during the visible area
; I.e. the number of clock cycles executed corresponds to the pixel clock rate (40 MHz), but
; the horisontal resolution are halved => 400 pixels per line

.wrap_target
    wait 1 irq 1 side 0
    out pins, 8 side 0      ; Visible area 800  cycles. 1 pixel
    set y, 19   side 0    ; Inner loop 21 pixels, outer loop 19 pixels = 399 pixels
visible_y:
    out pins, 8 side 0
    set x, 19   side 0      ; One visible1 iteration is 1+1+this value pixels
visible_x:
    out pins, 8 side 0
    jmp x-- visible_x side 0
    out pins, 8 side 0
    jmp y-- visible_y side 0

    set pins, 0 side 0 [7]  ; Front porch 40 cycles
    nop         side 0 [7]
    set pins, 0 side 1 [7]  ; Sync pulse 128 cycles
    nop         side 1 [7]
    set pins, 0 side 0 [7] ; Back porch 88 cycles
    nop         side 0 [7]
    nop         side 0 [7]
    irq set 0
.wrap

.program vga_vsync
.wrap_target
    wait 1 irq 0
    set pins,2              ; Vsync no Hsync
    set y, 31               ; Run 840 cycles
visible_y:
    set x, 31
visible_x:
    jmp x-- visible_x
    jmp y-- visible_y

    set pins,3              ; Vsync + Hsync

    set y, 31               ; Run 840 cycles
sync_y:
    set x, 31
sync_x:
    jmp x-- sync_x
    jmp y-- sync_y

    set pins,2

    set y, 31               ; Run 840 cycles
backporch_y:
    set x, 31
backporch_x:
    jmp x-- sync_x
    jmp y-- sync_y
    irq set 1
.wrap

%c-sdk {
static inline void vga_visible_program_init(PIO pio, uint sm, uint offset, uint pin, uint sideset_pin, float clock_div) {
    const int number_of_pins = 6;
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, true);

    pio_sm_config c = vga_visible_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, number_of_pins);
    sm_config_set_sideset_pins(&c, sideset_pin);

    // Shift to the right (LSB first), auto pull enabled, 32 bit auto pull trigger
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    sm_config_set_clkdiv(&c, clock_div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void vga_vsync_program_init(PIO pio, uint sm, uint offset, uint pin, float clock_div) {
    const int number_of_pins = 2;
    pio_sm_set_consecutive_pindirs(pio, sm, pin, number_of_pins, true);

    pio_sm_config c = vga_vsync_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin, number_of_pins);

    // Shift to the right (LSB first), auto pull enabled, 32 bit auto pull trigger
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    sm_config_set_clkdiv(&c, clock_div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
